{
  "ver": "1.0.25",
  "uuid": "7223ebfc-1ae6-4f07-86e5-bc6583102d3b",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#if QE_USE_MASK\nvarying vec2 mask_uv0;\nuniform mediump mat4 mat_mask;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x, mask_pos.y);\n  #endif\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if QE_USE_MASK\nuniform sampler2D texture2;\nvarying vec2 mask_uv0;\n#endif\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  o *= v_color;\n  #if QE_USE_MASK\n  o *= texture2D(texture2, mask_uv0).a;\n  #endif\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\n#if QE_USE_MASK\nout vec2 mask_uv0;\nuniform MASK{\n    mediump mat4 mat_mask;\n};\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x, mask_pos.y);\n  #endif\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\n#if QE_USE_MASK\nuniform sampler2D texture2;\nin vec2 mask_uv0;\n#endif\nuniform sampler2D texture;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  o *= v_color;\n  #if QE_USE_MASK\n  o *= texture2D(texture2, mask_uv0).a;\n  #endif\n  gl_FragColor = o;\n}"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\nattribute vec4 a_color0;\nattribute vec4 v_dark;\n#endif\n#if QE_USE_MASK\nvarying vec2 mask_uv0;\nuniform mediump mat4 mat_mask;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n      mvp = cc_matViewProj * cc_matWorld;\n  #else\n      mvp = cc_matViewProj;\n  #endif\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x, mask_pos.y);\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n      v_dark = a_color0;\n  #endif\n  gl_Position = mvp * pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec4 v_light;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#if USE_TINT\nvarying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\nuniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (float alpha) {\n    #if USE_ALPHA_TEST\n        if (alpha < alphaThreshold) discard;\n    #endif\n}\n#if QE_USE_MASK\nuniform sampler2D texture2;\nvarying vec2 mask_uv0;\n#endif\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n      finalColor.a = v_light.a * texColor.a;\n      finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n      finalColor = texColor * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  #if QE_USE_MASK\n  vec4 mask =  texture2D(texture2, mask_uv0);\n  finalColor.rgb *= mask.a;\n  finalColor.a *= mask.a;\n  #endif\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\nin vec4 a_color0;\nin vec4 v_dark;\n#endif\n#if QE_USE_MASK\nout vec2 mask_uv0;\nuniform MASK{\n    mediump mat4 mat_mask;\n};\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n      mvp = cc_matViewProj * cc_matWorld;\n  #else\n      mvp = cc_matViewProj;\n  #endif\n  vec4 pos = vec4(a_position, 1);\n  #if QE_USE_MASK\n    vec4 mask_pos;\n    #if CC_USE_MODEL\n    mask_pos = mat_mask * cc_matWorld * pos;\n    #else\n    mask_pos = mat_mask  * pos;\n    #endif\n    mask_uv0 = vec2(mask_pos.x, mask_pos.y);\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n      v_dark = a_color0;\n  #endif\n  gl_Position = mvp * pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\nin vec4 v_light;\nin vec2 v_uv0;\nuniform sampler2D texture;\n#if USE_TINT\nin vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\nuniform ALPHATHRESHOLD{\n     float alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (float alpha) {\n    #if USE_ALPHA_TEST\n        if (alpha < alphaThreshold) discard;\n    #endif\n}\n#if QE_USE_MASK\nuniform sampler2D texture2;\nin vec2 mask_uv0;\n#endif\nvoid main () {\n  vec4 texColor = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  vec4 finalColor;\n  #if USE_TINT\n      finalColor.a = v_light.a * texColor.a;\n      finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n      finalColor = texColor * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  #if QE_USE_MASK\n  vec4 mask =  texture2D(texture2, mask_uv0);\n  finalColor.rgb *= mask.a;\n  finalColor.a *= mask.a;\n  #endif\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}